//+build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const (
	blobFileName string = "static.go"
	embedFolder  string = "assets"
)

// define function to convert byteslice to string
var conv = map[string]interface{}{"conv": fmtByteSlice}

// define the code gen template
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package static

// Code generated by go generate; DO NOT EDIT.

func init() {
    {{- range $name, $file := . }}
        blob.Add("{{ $name }}", []byte{ {{ conv $file }} })
    {{- end }}
}`),
)

//fmtByteSlice takes a slice of bytes and returns the value in string
func fmtByteSlice(s []byte) string {
	builder := strings.Builder{}

	for _, v := range s {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}

	return builder.String()
}

func main() {
	// check directory with files exists
	if _, err := os.Stat(embedFolder); os.IsNotExist(err) {
		log.Fatal("static directory does not exist!")
	}

	// create map for filenames
	configs := make(map[string][]byte)

	// walk through embed directory
	err := filepath.Walk(embedFolder, func(path string, info os.FileInfo, err error) error {
		relativePath := filepath.ToSlash(strings.TrimPrefix(path, embedFolder))
		fmt.Printf("rel path: %v\n", relativePath)
		if info.IsDir() {
			// skip directories
			log.Println(path, "is a directory, skipping...")
			return nil
		} else {
			// embed files
			log.Println(path, "is a file, packing in...")
			// read the file
			b, err := ioutil.ReadFile(path)
			if err != nil {
				log.Printf("Error reading %s: %s", path, err)
				return err
			}
			// add file to map
			configs[relativePath] = b
		}
		return nil
	})
	if err != nil {
		log.Fatal("Error walking through embed directory:", err)
	}

	// create blob file
	f, err := os.Create(blobFileName)
	if err != nil {
		log.Fatal("Error creating blob file:", err)
	}
	defer f.Close()

	// create buffer to hold template
	builder := &bytes.Buffer{}

	// execute template
	if err = tmpl.Execute(builder, configs); err != nil {
		log.Fatal("Error executing template", err)
	}

	// format generated code
	data, err := format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}

	// write blob file
	if err = ioutil.WriteFile(blobFileName, data, os.ModePerm); err != nil {
		log.Fatal("Error writing blob file", err)
	}
}
